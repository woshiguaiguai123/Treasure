20170327
1. AS和Git
2. Butterknife
    添加依赖：两句
    绑定视图、资源、设置监听
3. 主页面搭建：
    主要的是视频播放
4. 主页面分别实现了登录注册的跳转和布局搭建(Toolbar展示)
任务：
主页面搭建
登录和注册的搭建、Toolbar的展示
明天：
MVP

20170328
1. 登录注册页面布局搭建和视图的处理
2. 登录和注册模拟场景进行
3. MVP项目架构方式

MVC：
Model：数据：网络请求得到的数据、数据库读取的数据、本地的数据等
View：布局（视图）
Controller：Activity、Fragment等

能不能将视图和业务分离？视图和业务模块独立

MVP：
Model：数据：网络请求得到的数据、数据库读取的数据、本地的数据等
View：视图、用户界面：Activity、Fragment、自定义的视图
Presenter：交互中间人，View通知P来进行数据的获取，拿到数据之后
    要把数据给View，数据和视图沟通的桥梁。

使用：
Model：数据
View：视图
Presenter：业务类
View Interface：视图接口，主要是为了处理业务过程中涉及到的视图的操作
    Activity实现这个视图接口，实现具体的视图方法

总结：
登录注册的场景实现：
1. 自定义一个对话框
2. MVP：业务和视图分离、
        解耦：降低耦合度，每一个模块互相独立
        维护性、结构更加清晰
任务：
一定要理清MVP的使用
完成登录和注册的实现。
明天：
网络Retrofit。

20170329
1. http基本知识点
2. OkHttp
3. Retrofit

请求和响应的过程分析：
请求：
1. 创建一个客户端
2. 构建一个请求：根据接口文档里面的接口进行构建
    请求的url、请求方式、请求头、请求体等
3. 客户端去发送请求

响应：
1. 响应码：一般根据响应码判断响应有没有成功
2. 获取响应头信息、响应体信息
3. 一般处理响应体信息：Json字符串，通过Json解析拿到实际的数据
    解析：Gson来实现数据的解析

OkHttp进行网络请求：
1. 添加依赖
2. 构建了Get请求
3. OkHttpClient进行单例化
4. Call: 请求和响应做管理。
    构建：okHttpClient.newCall(request);
    执行：execute(),enqueue();
    取消: call.cancel(), 是可以在任意的线程取消的
5. 功能：拦截器，把请求和响应的过程可以进行拦截
    设置给客户端的：OkHttpClient
    1. 可以自定义：继承自Intercept
    2. 提供一个日志拦截器：主要是为了帮我们打印请求和响应的信息
  日志拦截器：HttpLoggingInterceptor
  1. 添加依赖：
    compile 'com.squareup.okhttp3:logging-interceptor:3.6.0'
  2. 设置给OkHttpClient

总结：
1. http基本的知识：
    了解消息的结构
2. OkHttp的使用
    使用的流程、优化
    Call模型的概念
    拦截器：日志拦截器
任务：OkHttp的知识
明天：
Post请求
Retrofit


20170330:
Post请求的构建、用OkHttp完善登录的效果
Retrofit网络框架的讲解。

Retrofit
1. 添加依赖
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
2. 创建和使用
    1. 创建Retrofit
        mRetrofit = new Retrofit.Builder()
                        .baseUrl(BASE_URL)// 必须要加的BASEURL
                        .client(mOkHttpClient)// 添加OkHttpClient
                        .build();
    2. 构建请求：创建一个接口，方便对应服务器接口，最后通过Retrofit的create实现
    3. 请求接口实现：mRetrofit.create(TreasureApi.class);

3. 转换器：
    GSON转换器：Json--实体类之间进行自动的转换
    1. 添加依赖：
    2. 给Retrofit设置
    3. 替换需要转换的内容：请求体和响应体

总结：
Retrofit
任务：
流程、注解多多理解、转换器
登录实现
明天：
其他的请求
Home页面的搭建：侧滑和侧滑菜单
百度地图的集成

20170331：
1. Retrofit的其他的请求
2. 注册的实现
3. 侧滑
    处理侧滑：图标
    侧滑菜单项的选择处理
    侧滑的视图处理：头像的展示
    登录之后直接到Home
4. Home页面实现地图相关
5. 地图的集成和展示
    1. 了解
    2. cmd--keytool命令是不是可以实现
        keytool命令是JDK的一个证书管理工具，路径在JDK安装路径bin目录下
        解决：http://blog.csdn.net/csdnhejingzhou/article/details/50643246

总结：
1. Retrofit的使用
2. 登录和注册实现
3. Home页面：布局的搭建、侧滑
4. 地图的介绍

任务：
功能处理：Home页面
准备：了解百度地图
      注册一个账号
      keytool命令的问题
      Demo的下载
明天：百度地图的集成和使用

20170401:

1. 获取appkey：官网上申请秘钥：签名文件SHA1 + 包名

    SHA1值：debug.keystore签名文件获取的

    1. 使用我们电脑里面的debug.keystore:在其他电脑上运行key会验证出错
        cd .android
        keytool -list -v -keystore debug.keystore
        输入口令：android，注意：他不会显示，直接输完回车就可以了
        SHA1值

    2. 自己在项目里面放置一个debug.keystore
        debug.keystore放置在app下面，要在build.gradle里面声明
        声明方式：signingConfigs {
                     // your debug keystore
                     debug{
                         storeFile file("debug.keystore")
                     }
                 }

        cmd
        cd F:\BaiduMapsApiASDemo\app
        keytool -list -v -keystore debug.keystore

        AS直接查看：
        Gradle--->app模块里面的signingReport

    3. keytool命令不能使用：不是内部或外部的命令
        keytool.exe在jdk的安装路径bin目录下
        cd C:\Program Files\Java\jdk1.8.0_77\bin（keytool所在的路径）
        debug的keystore要写成绝对路径。
        keytool -list -v -keystore C:\Users\123\.android\debug.keystore

2. key的验证问题：
    1 内部错误，不是我们的问题
    230 key申请的有问题：SHA1值、包名是否正确。

3. 集成的操作流程
    1. 添加jar包：采用Demo给的方式
        1. jar包和so文件都放置在libs下面(可以直接从Demo里面拿到)
        2. build.gradle里面指明so文件的路径
            sourceSets {
                    main {
                        jniLibs.srcDir 'libs'
                    }
                  }
    2. 配置项目
        1. 清单文件加入：开发者key(appKey)、权限
        2. 布局中添加地图控件：也可以动态创建的方式
        3. 在Application里面初始化SDK
            SDKInitializer.initialize(getApplicationContext());

    3. Key的获取
        1. 在app下面放置debug.keystore
        2. 声明我们使用的是本项目下面的debug.keystore文件
        3. 获取debug.keystore文件的SHA1值
            5D:87:28:93:2C:DC:12:D0:7C:E2:C1:EF:14:CE:A3:77:E5:CB:9A:0A
        4. 在官网上申请appkey，拿到之后在清单文件里面加上

        问题：
        1. 只出现网格，没有出现地图
            1. 排除网络为题
            2. appkey有问题：230问题（key有问题）：SHA1、包名
        2. No config chosen：openGL：
            模拟器问题、真机测试
        3. Message警告信息：但是build Successful了，是内部的问题，不是我们项目的问题

4. 百度地图的使用
    1. 动态创建的MapView
    2. 处理了视图的四个图标的事件
    3. 定位：
        1. 清单文件添加服务和权限
        2. 使用

总结：
1. 百度地图的集成：SHA1值的获取的问题
2. 百度地图的操作：切换地图类型、设置地图的状态、指南、缩放
3. 百度地图的定位
任务：
地图集成和展示、定位
下次：
地图：添加覆盖物、监听等，结合宝藏的数据获取


20170405:
结合宝藏数据的获取和展示，来进行添加覆盖物、一系列监听等的使用
地图的状态发生变化的之后，根据当前地图所在的位置的某一个区域来获取

定位：
1. 清单文件里面的定位服务
2. 真机测试、6.0 处理一下权限
3. 网络的问题：尽量不要使用电脑散的wifi
4. jar包和so版本不一致
5. 如果定位有偏差：坐标类型bd09ll

1. 宝藏数据获取
    1. 设置地图的状态监听
    2. 地图状态变化之后，根据当前的地图状态的位置所在的区域来动态获取宝藏
    3. 构建获取宝藏的请求，然后请求得到宝藏数据
    4. 将宝藏的数据以添加覆盖物(Marker)的形式展示到地图上
    5. 设置地图的标注物的点击监听
    6. 请求的数据做了一个缓存
2. 宝藏信息卡片
    视图数据绑定的方法
3. 三种视图的切换：普通、选中、埋藏的切换
    宝藏点击的时候会进行视图切换
4. 跳转到宝藏详情页

总结：
1. 数据获取和展示
    1. 请求的构建
    2. 什么时候去获取数据：地图的状态监听里面
    3. 地图的位置的区域获取宝藏
    4. 网络请求的实现MVP
    5. 数据的展示：以添加覆盖物的形式展示出来
2. 宝藏的点击(Marker的点击)
3. 视图的切换：三种视图
4. 自定义宝藏卡片视图
5. 点击宝藏卡片视图，跳转页面

任务：
完成数据的获取及视图的处理。
明天：
宝藏详情的实现
宝藏列表视图的实现

20170406：
1. 宝藏详情页

    toolbar、地图、TreasureView
    网络获取数据：
    1. 构建请求
    2. MVP模式来实现

    步行和骑行导航
    1. 步行和骑行点击事件
    2. 分别构建骑行和步行的功能实现
    3. 没有安装百度地图：弹出一个提示框

2. 宝藏列表的视图

    1. 选项菜单：Home页面的Toolbar上展示的
    2. 菜单的选中事件：切换展示地图视图和列表视图
    3. 列表的视图如何切换
    4. 列表视图的数据填充

3. Home页面的处理：
    返回键：关闭侧滑、什么时候可以退出
    处理侧滑的几个菜单项的点击
           1. 埋藏宝藏：切换到埋藏的视图
           2. 退出：用户信息的清空

总结：
1. 宝藏详情页
    除了视图处理，导航
    toolbar、地图展示、网络获取(MVP)
2. 宝藏列表的视图
    Home页面：选项菜单控制
    RecyclerView
3. Home：返回键、侧滑菜单切换
任务：
实现详情和列表视图
明天：
埋藏宝藏的实现

20170407：
埋藏宝藏
1. 百度地图的API：地理编码的使用
2. 网络请求+MVP

埋藏宝藏视图方面：
地图状态变化的时候去将当前的位置信息转换为地址信息
1. 地理编码进行初始化
2. 什么时候发起：经纬度-->地址信息(反地理编码)
    放置到地图状态变化结束的时候(如果在埋藏宝藏的状态下，去发起)
3. 拿到编码的结果之后：展示在TextView上
4. 输入标题，处理标题卡片的点击事件:跳转到埋藏宝藏的详细页面

埋藏宝藏的详细页面
1. 构建请求
2. 执行+MVP来进行

个人信息页面视图
点击侧滑的头像跳转到个人详情页

总结：
埋藏宝藏：
1. 地理编码：
    正向地理编码(地址-->经纬度)
    反向地理编码(经纬度-->地址)
2. 埋藏宝藏的数据上传：网络请求+MVP
3. 个人信息：视图的分析和搭建
任务：
完成埋藏宝藏
个人信息页面视图实现
下周一：
头像的上传和更新
1. 弹出的视图：自定义PopupWindow
2. 第三方库：photocropper
3. 网络上传：首先是上传然后更新。

20170410：
头像上传
1. 自定义的PopupWindow
2. 相册和相机的跳转以及头像剪切
    PhotoCropper
    添加依赖：compile 'org.hybridsquad.android.photocropper:library:2.1.0'
    依赖包是一个aar的包，会发生清单文件合并的错误：按照提示修改：
        清单文件中添加：tools:replace="android:icon"

    注意：使用前清除之前剪切图片的缓存
    CropHelper.clearCachedCropFile(mCropParams.uri);

    使用：
    1. onActivityResult处理结果
    2. 创建CropHandler，并实现里面的方法
    3. 分别进行跳转到相册和相机来处理
3. 请求的构建和执行

总结：
1. 百度地图的集成和使用
    按照开发文档实践。
    1. 集成的流程
    2. 使用：基础的地图、定位、地理编码、导航等

2. 网络请求：Retrofit

    1. OkHttp的使用
        拦截器、请求的构建等
    2. Retrofit使用
        基于OkHttp封装，具有okHttp的功能
        装换器Gson
        注解：希望多多运用。

3. MVP
    视图和业务的分离。一般都是结合网络请求。